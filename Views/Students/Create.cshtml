@model DotNetCoreSqlDb.Models.Student

@{
    ViewData["Title"] = "Create Student";
    var contactTypes = (List<SelectListItem>)ViewBag.ContactTypes ?? new List<SelectListItem>();
}

<h2>Create Student</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Student</h4>
        <hr />
        <!-- Student Fields -->
        <div class="form-group">
            @Html.LabelFor(m => m.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ParentOrEmployer, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.ParentOrEmployer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.ParentOrEmployer, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.MainNotes, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.MainNotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.MainNotes, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.OngoingNotes, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.OngoingNotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.OngoingNotes, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CreatedDate, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <h4>Contact Information</h4>
        <!-- This container will hold finalized contacts (read-only summaries with hidden inputs) -->
        <div id="finalizedContacts"></div>
        <!-- This container will hold the active (editable) contact form -->
        <div id="activeContactContainer"></div>
        
        <!-- Button to add a new contact -->
        <button type="button" id="addContactBtn" class="btn btn-secondary">Add New Contact</button>
        
        <br /><br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<!-- Template for an active (editable) contact -->
<script id="activeContactTemplate" type="text/template">
<div class="active-contact" data-index="__INDEX__">
    <!-- This hidden field is required for MVC collection binding -->
    <input type="hidden" name="Contacts.Index" value="__INDEX__" />
    
    <div class="form-group">
        <label class="control-label col-md-2">Contact Type</label>
        <div class="col-md-10">
            <select name="Contacts[__INDEX__].Type" class="form-control contact-type">
                <option value="">Select Contact Type</option>
            </select>
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Value</label>
        <div class="col-md-10">
            <input type="text" name="Contacts[__INDEX__].Value" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Invitation</label>
        <div class="col-md-10">
            <input type="checkbox" name="Contacts[__INDEX__].Invitation" />
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Emergency</label>
        <div class="col-md-10">
            <input type="checkbox" name="Contacts[__INDEX__].Emergency" />
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Money</label>
        <div class="col-md-10">
            <input type="checkbox" name="Contacts[__INDEX__].Money" />
        </div>
    </div>
</div>
</script>

<!-- Template for contact type options -->
<script id="contactOptions" type="text/template">
    @foreach (var ct in contactTypes)
    {
        <option value="@ct.Value">@ct.Text</option>
    }
</script>

@section Scripts {
    <script>
        $(function() {
            var contactIndex = 0;
            
            // When "Add New Contact" is clicked, finalize any active contact and create a new one.
            $("#addContactBtn").click(function() {
                finalizeActiveContact();
                createActiveContact();
            });
            
            // When the form is submitted, finalize any active contact.
            $("form").submit(function() {
                finalizeActiveContact();
                // Let the submission proceed.
            });
            
            // Finalize the active contact by converting it to a read-only summary,
            // but keep all hidden inputs so they are submitted.
            function finalizeActiveContact() {
                var $active = $("#activeContactContainer .active-contact");
                if ($active.length === 0) { return; }
                
                var idx = $active.data("index");
                var type = $active.find("select[name='Contacts[" + idx + "].Type'] option:selected").text();
                var val = $active.find("input[name='Contacts[" + idx + "].Value']").val();
                var invit = $active.find("input[name='Contacts[" + idx + "].Invitation']").prop("checked");
                var emerg = $active.find("input[name='Contacts[" + idx + "].Emergency']").prop("checked");
                var money = $active.find("input[name='Contacts[" + idx + "].Money']").prop("checked");
                
                var checks = [];
                if (invit) { checks.push("Invitation"); }
                if (emerg)  { checks.push("Emergency"); }
                if (money)  { checks.push("Money"); }
                
                var summary = "[Contact #" + idx + ": " + type + " " + val;
                if (checks.length > 0) {
                    summary += " (" + checks.join(", ") + ")";
                }
                summary += "]";
                
                // Create a container for the finalized contact.
                var $final = $("<div class='finalized-contact'/>");
                $final.append($("<div class='summary-text'/>").text(summary));
                
                // Hide all input elements (but do not remove them) so they still post.
                $active.find("select, input[type='text'], input[type='checkbox'], input[type='hidden']")
                       .css("display", "none");
                
                // Move the content of the active contact into the finalized contacts container.
                $final.append($active.contents());
                $active.remove();
                $("#finalizedContacts").append($final);
            }
            
            // Create a new active contact form.
            function createActiveContact() {
                contactIndex++;
                var template = $("#activeContactTemplate").html();
                template = template.replace(/__INDEX__/g, contactIndex);
                var $contact = $(template);
                var optionHtml = $("#contactOptions").html();
                $contact.find("select.contact-type").append(optionHtml);
                $("#activeContactContainer").html($contact);
            }
        });
    </script>
}
